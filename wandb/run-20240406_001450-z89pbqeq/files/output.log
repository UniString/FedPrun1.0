VGG16(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (36): ReLU(inplace=True)
    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (39): ReLU(inplace=True)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (44): AvgPool2d(kernel_size=1, stride=1, padding=0)
  )
  (classifier): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
  )
  (fc): Linear(in_features=4096, out_features=10, bias=True)
)
********************************************************************************
Round   0
tensor(188.5145, device='cuda:0')
********************************************************************************
Round   1
tensor(288.5610, device='cuda:0')
********************************************************************************
Round   2
Testing accuracy: 10.12
tensor(351.6671, device='cuda:0')
********************************************************************************
Round   3
tensor(384.0753, device='cuda:0')
********************************************************************************
Round   4
tensor(396.6629, device='cuda:0')
********************************************************************************
Round   5
Testing accuracy: 26.68
tensor(398.4575, device='cuda:0')
********************************************************************************
Round   6
tensor(394.8524, device='cuda:0')
********************************************************************************
Round   7
tensor(389.4396, device='cuda:0')
********************************************************************************
Round   8
Testing accuracy: 40.59
tensor(380.4293, device='cuda:0')
********************************************************************************
Round   9
tensor(371.4063, device='cuda:0')
********************************************************************************
Round  10
tensor(362.3896, device='cuda:0')
********************************************************************************
Round  11
Testing accuracy: 56.29
tensor(353.3721, device='cuda:0')
********************************************************************************
Round  12
tensor(344.3596, device='cuda:0')
********************************************************************************
Round  13
tensor(337.1439, device='cuda:0')
********************************************************************************
Round  14
Testing accuracy: 61.77
tensor(329.9316, device='cuda:0')
********************************************************************************
Round  15
tensor(322.7185, device='cuda:0')
********************************************************************************
Round  16
tensor(315.5064, device='cuda:0')
********************************************************************************
Round  17
Testing accuracy: 66.24
tensor(308.2978, device='cuda:0')
********************************************************************************
Round  18
tensor(302.8849, device='cuda:0')
********************************************************************************
Round  19
tensor(295.6728, device='cuda:0')
********************************************************************************
Round  20
Testing accuracy: 69.40
tensor(290.2641, device='cuda:0')
********************************************************************************
Round  21
tensor(284.8548, device='cuda:0')
********************************************************************************
Round  22
tensor(277.6438, device='cuda:0')
********************************************************************************
Round  23
Traceback (most recent call last):
  File "C:\Users\Matrix\Documents\Code\FedMut\FedMut\main_fed.py", line 317, in <module>
    FedMut(args, net_glob, dataset_train, dataset_test, dict_users)
  File "C:\Users\Matrix\Documents\Code\FedMut\FedMut\Algorithm\Training_FedMut.py", line 162, in FedMut
    item_acc = test(net_glob, dataset_test, args)
  File "C:\Users\Matrix\Documents\Code\FedMut\FedMut\Algorithm\Training_FedMut.py", line 265, in test
    acc_test, loss_test = test_img(net_glob, dataset_test, args)
  File "C:\Users\Matrix\Documents\Code\FedMut\FedMut\models\test.py", line 21, in test_img
    data, target = data.cuda(), target.cuda()
KeyboardInterrupt